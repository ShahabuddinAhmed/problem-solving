class Solution {
    /**
     * Returns all permutations of the input string.
     *
     * @param {string} str Input string.
     * @return {Set<string>} Set with all permutations of the string.
     */
    permutations(str) {
        if (str.length === 0) {
            return new Set();
        } else {
            const first = str.charAt(0);
            const remainder = str.substring(1);
            const remainderPermutations = this.permutations(remainder);
            if (remainderPermutations.size === 0) {
                return new Set(first);
            }
            return new Set(
                [...remainderPermutations].flatMap((word) =>
                    this.insertChar(first, word)
                )
            );
        }
    }

    /**
     * Helper method that inserts the input char at
     * valid positions in the input word and returns
     * all combinations as an array of strings.
     *
     * @param {string} c    Char to insert.
     * @param {string} word Word that will accept the input char.
     * @return {Array<string>} All combinations generated by inserting the char.
     */
    insertChar(c, word) {
        const out = [];
        for (let i = 0; i <= word.length; i++) {
            const left = word.substring(0, i);
            const right = word.substring(i);
            out.push(left + c + right);
        }
        return out;
    }
}

module.exports = Solution;
